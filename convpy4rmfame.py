#convpy4rmfame.py

"""
This script was auto-generated by formgenw.
"""
import polars as pl
from typing import List, Tuple
import polars_econ_mock as ple
from formulas import *

# --- 1. Initial Setup ---
pdf = pl.DataFrame({
    "DATE": pl.date_range(pl.date(2018, 1, 1), pl.date(2023, 12, 31), "1mo", eager=True),
    "V123": [i*1.1 for i in range(72)], "V143": [i*1.2 + 5 for i in range(72)],
    "V1234": [100 + i*10 for i in range(72)], "V1434": [105 + i*0.5 for i in range(72)],
})

# --- 2. Computation Pipeline ---

# --- Level 1 Computations ---
pdf = pdf.with_columns([
    A_(),
    A(),
    PA_(),
    PA(),
    B_(),
    PB_()
])

# --- Level 2 Computations ---
pdf = pdf.with_columns([
    (pl.col("a_") / pl.col("a")).alias("AA"),
    (pl.col("pa_") / pl.col("pa")).alias("PAA")
])

# --- Level 3 Computations ---
pdf = pdf.with_columns([
    (pl.col("AA") + pl.col("a")).alias("BB"),
    (pl.col("PAA") + pl.col("pa")).alias("PBB")
])

# --- Level 4 Computations ---
pdf = pdf.with_columns([
    # xyz = $fishvol_rebase({a},{pa},2017)*12
    (FISHVOL(series_pairs=[
        (pl.col("a"), pl.col("pa"))
    ], date_col=pl.col("DATE"), rebase_year=2017)*12).alias("XYZ"),
    # xyza$ = $fishvol_rebase({b$},{pb$},2017)*12
    (FISHVOL(series_pairs=[
        (pl.col("b_"), pl.col("pb_"))
    ], date_col=pl.col("DATE"), rebase_year=2017)*12).alias("XYZA_"),
    # xyz$ = $fishvol_rebase({ee},{pee},2017)*12
    (FISHVOL(series_pairs=[
        (pl.col("AA"), pl.col("PAA")),
        (pl.col("BB"), pl.col("PBB")),
        (pl.col("a_"), pl.col("pa_"))
    ], date_col=pl.col("DATE"), rebase_year=2017)*12).alias("XYZ_")
])

# --- Level 5 Computations ---
pdf = pdf.with_columns([
    # vol_index_1 = $fishvol_rebase({vols_g1},{prices_g1},2022)
    (FISHVOL(series_pairs=[
        (pl.col("a_"), pl.col("pa_")),
        (pl.col("AA"), pl.col("PAA"))
    ], date_col=pl.col("DATE"), rebase_year=2022)*12).alias("VOL_INDEX_1"),
    CHAIN(price_quantity_pairs=[
        (pl.col("pa_"), pl.col("a_")),
        (pl.col("pa_"), pl.col("a")),
        (pl.col("pa_"), pl.col("BB"))
    ], date_col=pl.col("DATE"), year="2025").alias("ABC"),
    CHAIN(price_quantity_pairs=[
        (pl.col("pa_"), pl.col("a_")),
        (-pl.col("pa_"), pl.col("a")),
        (pl.col("pa_"), pl.col("BB"))
    ], date_col=pl.col("DATE"), year="2025").alias("ABC1"),
    CHAIN(price_quantity_pairs=[
        (pl.col("pa_"), pl.col("a_")),
        (-pl.col("pa_"), pl.col("BB"))
    ], date_col=pl.col("DATE"), year="2022").alias("ACC")
])

# --- Frequency Conversions ---
converted_df = CONVERT(
    pdf.select(["DATE", "a_"]),
    as_freq="1mo",
    to_freq="1q",
    technique="disc",
    observed="ave"
).rename({"a_": "ZED"})
pdf = pdf.join_asof(converted_df, on="DATE", strategy="forward")

# --- 3. Final Formatting ---
# Note: Some columns may not exist, so we'll select only available columns
available_cols = ["DATE", "a_", "a", "pa_", "pa", "AA", "PAA", "BB", "PBB", "XYZ", "b_", "pb_", "XYZA_", "XYZ_", "ABC", "ABC1", "ACC", "VOL_INDEX_1"]
existing_cols = ["DATE"] + [col for col in available_cols[1:] if col in pdf.columns]

final_result = (
    pdf.select(existing_cols)
    .rename({
        'a_': 'A$', 'pa_': 'PA$', 'b_': 'B$', 'pb_': 'PB$', 
        'XYZA_': 'XYZA$', 'XYZ_': 'XYZ$'
    })
    .unpivot(index="DATE", variable_name="TIME_SERIES_NAME", value_name="VALUE")
    .sort(["TIME_SERIES_NAME", "DATE"])
    .with_columns(SOURCE_SCRIPT_NAME=pl.lit("FAME_ETL"))
)

print("Computation finished successfully!")