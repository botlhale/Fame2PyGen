"""
┌───────────────────────────────────────────┐
│            Fame2PyGen                     │
│         FAME → Python                     │
│    Auto-Generated Pipeline                │
└───────────────────────────────────────────┘

This file was automatically generated by Fame2PyGen
Contains the conversion pipeline from FAME script to Python
"""
import polars as pl
from formulas import *
import ple

# Example input dataframe for demonstration purposes
df = pl.DataFrame({
    'date': pl.date_range(pl.date(2019, 1, 1), pl.date(2025, 1, 1), '1mo', eager=True),
    'monthly_series': pl.Series('monthly_series', range(1, 74)),
    'prices': pl.Series('prices', range(1, 74)),
    'v123': pl.Series('v123', range(1, 74)),
    'v143': pl.Series('v143', range(1, 74)),
    'volumes': pl.Series('volumes', range(1, 74)),
})

# ---- DECLARE SERIES ----
# (Declarations would be placed here if needed)

# ---- COMPUTATIONS ----
# Mathematical expression: a$ = v123*12
df = df.with_columns([A_().alias('a$')])
# Mathematical expression: a = v143*12
df = df.with_columns([A().alias('a')])
# Mathematical expression: b = v143*2
df = df.with_columns([B().alias('b')])
# Mathematical expression: b$ = v123*6
df = df.with_columns([B_().alias('b$')])
# Mathematical expression: c$ = v123*5
df = df.with_columns([C_().alias('c$')])
# Mathematical expression: d = v123*1
df = df.with_columns([D().alias('d')])
# Mathematical expression: e = v123*2
df = df.with_columns([E().alias('e')])
# Mathematical expression: f = v123*3
df = df.with_columns([F().alias('f')])
# Mathematical expression: g = v123*4
df = df.with_columns([G().alias('g')])
# Mathematical expression: h = v123*5
df = df.with_columns([H().alias('h')])
# Mathematical expression: pa$ = v123*3
df = df.with_columns([PA_().alias('pa$')])
# Mathematical expression: pa = v143*4
df = df.with_columns([PA().alias('pa')])
# Mathematical expression: pb = v143*1
df = df.with_columns([PB().alias('pb')])
# Mathematical expression: pb$ = v123*1
df = df.with_columns([PB_().alias('pb$')])
# Mathematical expression: pc$ = v123*2
df = df.with_columns([PC_().alias('pc$')])
# Mathematical expression: pd = v123*3
df = df.with_columns([PD().alias('pd')])
# Mathematical expression: pe = v123*4
df = df.with_columns([PE().alias('pe')])
# Mathematical expression: pf = v123*5
df = df.with_columns([PF().alias('pf')])
# Mathematical expression: pg = v123*1
df = df.with_columns([PG().alias('pg')])
# Mathematical expression: ph = v123*2
df = df.with_columns([PH().alias('ph')])

# Demonstration: CHAIN over multiple (price, quantity) pairs
# Combines row-wise products of each pair and sums them into 'chain_value'
df = df.with_columns([
    ple.chain([
        (pl.col('prices'), pl.col('volumes')),
        (pl.col('v143'), pl.col('v123')),
    ], date_col=pl.col('date')).alias('chain_value')
])

# (Additional pipeline steps, such as frequency conversion or final formatting, would follow)
